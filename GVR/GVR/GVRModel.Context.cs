//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GVR
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class GVREntities : DbContext
    {
        public GVREntities()
            : base("name=GVREntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Client> Client { get; set; }
        public DbSet<Currency> Currency { get; set; }
        public DbSet<ElectricalAppliance> ElectricalAppliance { get; set; }
        public DbSet<OverLookingView> OverLookingView { get; set; }
        public DbSet<Owner_Currency> Owner_Currency { get; set; }
        public DbSet<OwnerRent> OwnerRent { get; set; }
        public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<Tanent_OverLokkingView> Tanent_OverLokkingView { get; set; }
        public DbSet<TanentApplication> TanentApplication { get; set; }
        public DbSet<TanentRent> TanentRent { get; set; }
        public DbSet<Unit> Unit { get; set; }
        public DbSet<Unit_ElectricalAppliance> Unit_ElectricalAppliance { get; set; }
        public DbSet<Unit_OverLookingView> Unit_OverLookingView { get; set; }
        public DbSet<UnitEditHistory> UnitEditHistory { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Client_Add(string clientName, string occupation, string homeAddress, string city, string country, string email, string fax, string typ, string postalCode, string work_DayTime_Phone, string home_Evening_Phone, string mobilePhone)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var typParameter = typ != null ?
                new ObjectParameter("Typ", typ) :
                new ObjectParameter("Typ", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var work_DayTime_PhoneParameter = work_DayTime_Phone != null ?
                new ObjectParameter("Work_DayTime_Phone", work_DayTime_Phone) :
                new ObjectParameter("Work_DayTime_Phone", typeof(string));
    
            var home_Evening_PhoneParameter = home_Evening_Phone != null ?
                new ObjectParameter("Home_Evening_Phone", home_Evening_Phone) :
                new ObjectParameter("Home_Evening_Phone", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Client_Add", clientNameParameter, occupationParameter, homeAddressParameter, cityParameter, countryParameter, emailParameter, faxParameter, typParameter, postalCodeParameter, work_DayTime_PhoneParameter, home_Evening_PhoneParameter, mobilePhoneParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Client_Delete(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Client_Delete", clientIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Client_DeleteById(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Client_DeleteById", clientIdParameter);
        }
    
        public virtual ObjectResult<USP_Client_GetById_Result> USP_Client_GetById(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Client_GetById_Result>("USP_Client_GetById", clientIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Client_UpdateById(Nullable<int> clientId, string clientName, string occupation, string homeAddress, string city, string country, string email, string fax, string typ, string postalCode, string work_DayTime_Phone, string home_Evening_Phone, string mobilePhone)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var homeAddressParameter = homeAddress != null ?
                new ObjectParameter("HomeAddress", homeAddress) :
                new ObjectParameter("HomeAddress", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var typParameter = typ != null ?
                new ObjectParameter("Typ", typ) :
                new ObjectParameter("Typ", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var work_DayTime_PhoneParameter = work_DayTime_Phone != null ?
                new ObjectParameter("Work_DayTime_Phone", work_DayTime_Phone) :
                new ObjectParameter("Work_DayTime_Phone", typeof(string));
    
            var home_Evening_PhoneParameter = home_Evening_Phone != null ?
                new ObjectParameter("Home_Evening_Phone", home_Evening_Phone) :
                new ObjectParameter("Home_Evening_Phone", typeof(string));
    
            var mobilePhoneParameter = mobilePhone != null ?
                new ObjectParameter("MobilePhone", mobilePhone) :
                new ObjectParameter("MobilePhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Client_UpdateById", clientIdParameter, clientNameParameter, occupationParameter, homeAddressParameter, cityParameter, countryParameter, emailParameter, faxParameter, typParameter, postalCodeParameter, work_DayTime_PhoneParameter, home_Evening_PhoneParameter, mobilePhoneParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Currency_Add(string currency)
        {
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Currency_Add", currencyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Currency_Delete(Nullable<int> currencyId)
        {
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Currency_Delete", currencyIdParameter);
        }
    
        public virtual ObjectResult<USP_currency_GetById_Result> USP_currency_GetById(Nullable<int> currencyId)
        {
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_currency_GetById_Result>("USP_currency_GetById", currencyIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Currency_UpdateById(Nullable<int> currencyId, string currency)
        {
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("CurrencyId", currencyId) :
                new ObjectParameter("CurrencyId", typeof(int));
    
            var currencyParameter = currency != null ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Currency_UpdateById", currencyIdParameter, currencyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_ElectricalAppliance_Add(string electricalApplianceName)
        {
            var electricalApplianceNameParameter = electricalApplianceName != null ?
                new ObjectParameter("ElectricalApplianceName", electricalApplianceName) :
                new ObjectParameter("ElectricalApplianceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_ElectricalAppliance_Add", electricalApplianceNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_ElectricalAppliance_Delete(Nullable<int> electricalApplianceId)
        {
            var electricalApplianceIdParameter = electricalApplianceId.HasValue ?
                new ObjectParameter("ElectricalApplianceId", electricalApplianceId) :
                new ObjectParameter("ElectricalApplianceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_ElectricalAppliance_Delete", electricalApplianceIdParameter);
        }
    
        public virtual ObjectResult<USP_ElectricalAppliance_GetAll_Result> USP_ElectricalAppliance_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ElectricalAppliance_GetAll_Result>("USP_ElectricalAppliance_GetAll");
        }
    
        public virtual ObjectResult<USP_ElectricalAppliance_GetById_Result> USP_ElectricalAppliance_GetById(Nullable<int> electricalApplianceId)
        {
            var electricalApplianceIdParameter = electricalApplianceId.HasValue ?
                new ObjectParameter("ElectricalApplianceId", electricalApplianceId) :
                new ObjectParameter("ElectricalApplianceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ElectricalAppliance_GetById_Result>("USP_ElectricalAppliance_GetById", electricalApplianceIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_ElectricalAppliance_UpdateById(Nullable<int> electricalApplianceId, string electricalApplianceName)
        {
            var electricalApplianceIdParameter = electricalApplianceId.HasValue ?
                new ObjectParameter("ElectricalApplianceId", electricalApplianceId) :
                new ObjectParameter("ElectricalApplianceId", typeof(int));
    
            var electricalApplianceNameParameter = electricalApplianceName != null ?
                new ObjectParameter("ElectricalApplianceName", electricalApplianceName) :
                new ObjectParameter("ElectricalApplianceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_ElectricalAppliance_UpdateById", electricalApplianceIdParameter, electricalApplianceNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_OverLookingView_Add(string overLookingView)
        {
            var overLookingViewParameter = overLookingView != null ?
                new ObjectParameter("OverLookingView", overLookingView) :
                new ObjectParameter("OverLookingView", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_OverLookingView_Add", overLookingViewParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_OverLookingView_Delete(Nullable<int> overLookingViewId)
        {
            var overLookingViewIdParameter = overLookingViewId.HasValue ?
                new ObjectParameter("OverLookingViewId", overLookingViewId) :
                new ObjectParameter("OverLookingViewId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_OverLookingView_Delete", overLookingViewIdParameter);
        }
    
        public virtual ObjectResult<USP_OverLookingView_GetAll_Result> USP_OverLookingView_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_OverLookingView_GetAll_Result>("USP_OverLookingView_GetAll");
        }
    
        public virtual ObjectResult<USP_OverLookingView_GetById_Result> USP_OverLookingView_GetById(Nullable<int> overLookingViewId)
        {
            var overLookingViewIdParameter = overLookingViewId.HasValue ?
                new ObjectParameter("OverLookingViewId", overLookingViewId) :
                new ObjectParameter("OverLookingViewId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_OverLookingView_GetById_Result>("USP_OverLookingView_GetById", overLookingViewIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_OverLookingView_UpdateById(Nullable<int> overLookingViewId, string overLookingView)
        {
            var overLookingViewIdParameter = overLookingViewId.HasValue ?
                new ObjectParameter("OverLookingViewId", overLookingViewId) :
                new ObjectParameter("OverLookingViewId", typeof(int));
    
            var overLookingViewParameter = overLookingView != null ?
                new ObjectParameter("OverLookingView", overLookingView) :
                new ObjectParameter("OverLookingView", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_OverLookingView_UpdateById", overLookingViewIdParameter, overLookingViewParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Owner_Currency_Add(Nullable<int> unitID, Nullable<int> currencyID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Owner_Currency_Add", unitIDParameter, currencyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Owner_Currency_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Owner_Currency_Delete", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Owner_Currency_UpdateById(Nullable<int> id, Nullable<int> unitID, Nullable<int> currencyID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Owner_Currency_UpdateById", idParameter, unitIDParameter, currencyIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_OwnerRent_Add(Nullable<int> unitID, Nullable<int> rate, string refNumber, string itemDescription, Nullable<double> cR, Nullable<double> dB, Nullable<double> balance, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(int));
    
            var refNumberParameter = refNumber != null ?
                new ObjectParameter("RefNumber", refNumber) :
                new ObjectParameter("RefNumber", typeof(string));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var cRParameter = cR.HasValue ?
                new ObjectParameter("CR", cR) :
                new ObjectParameter("CR", typeof(double));
    
            var dBParameter = dB.HasValue ?
                new ObjectParameter("DB", dB) :
                new ObjectParameter("DB", typeof(double));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_OwnerRent_Add", unitIDParameter, rateParameter, refNumberParameter, itemDescriptionParameter, cRParameter, dBParameter, balanceParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_OwnerRent_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_OwnerRent_Delete", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_OwnerRent_UpdateById(Nullable<int> id, Nullable<int> unitID, Nullable<int> rate, string refNumber, string itemDescription, Nullable<double> cR, Nullable<double> dB, Nullable<double> balance, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(int));
    
            var refNumberParameter = refNumber != null ?
                new ObjectParameter("RefNumber", refNumber) :
                new ObjectParameter("RefNumber", typeof(string));
    
            var itemDescriptionParameter = itemDescription != null ?
                new ObjectParameter("ItemDescription", itemDescription) :
                new ObjectParameter("ItemDescription", typeof(string));
    
            var cRParameter = cR.HasValue ?
                new ObjectParameter("CR", cR) :
                new ObjectParameter("CR", typeof(double));
    
            var dBParameter = dB.HasValue ?
                new ObjectParameter("DB", dB) :
                new ObjectParameter("DB", typeof(double));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("Balance", balance) :
                new ObjectParameter("Balance", typeof(double));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_OwnerRent_UpdateById", idParameter, unitIDParameter, rateParameter, refNumberParameter, itemDescriptionParameter, cRParameter, dBParameter, balanceParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_TanentApplication_Add(string unitType, Nullable<int> numberOfBedRoom, string locationComment, Nullable<System.DateTime> checkInDate, Nullable<System.DateTime> checkOutDate, string purposeOfRent, string purposeOfRentComment, Nullable<bool> airportPickUp, string airportPickUpComment, Nullable<double> budgetFrom, Nullable<double> budgetTo, string budgetComment, Nullable<int> tanentId)
        {
            var unitTypeParameter = unitType != null ?
                new ObjectParameter("UnitType", unitType) :
                new ObjectParameter("UnitType", typeof(string));
    
            var numberOfBedRoomParameter = numberOfBedRoom.HasValue ?
                new ObjectParameter("NumberOfBedRoom", numberOfBedRoom) :
                new ObjectParameter("NumberOfBedRoom", typeof(int));
    
            var locationCommentParameter = locationComment != null ?
                new ObjectParameter("LocationComment", locationComment) :
                new ObjectParameter("LocationComment", typeof(string));
    
            var checkInDateParameter = checkInDate.HasValue ?
                new ObjectParameter("CheckInDate", checkInDate) :
                new ObjectParameter("CheckInDate", typeof(System.DateTime));
    
            var checkOutDateParameter = checkOutDate.HasValue ?
                new ObjectParameter("CheckOutDate", checkOutDate) :
                new ObjectParameter("CheckOutDate", typeof(System.DateTime));
    
            var purposeOfRentParameter = purposeOfRent != null ?
                new ObjectParameter("PurposeOfRent", purposeOfRent) :
                new ObjectParameter("PurposeOfRent", typeof(string));
    
            var purposeOfRentCommentParameter = purposeOfRentComment != null ?
                new ObjectParameter("PurposeOfRentComment", purposeOfRentComment) :
                new ObjectParameter("PurposeOfRentComment", typeof(string));
    
            var airportPickUpParameter = airportPickUp.HasValue ?
                new ObjectParameter("AirportPickUp", airportPickUp) :
                new ObjectParameter("AirportPickUp", typeof(bool));
    
            var airportPickUpCommentParameter = airportPickUpComment != null ?
                new ObjectParameter("AirportPickUpComment", airportPickUpComment) :
                new ObjectParameter("AirportPickUpComment", typeof(string));
    
            var budgetFromParameter = budgetFrom.HasValue ?
                new ObjectParameter("BudgetFrom", budgetFrom) :
                new ObjectParameter("BudgetFrom", typeof(double));
    
            var budgetToParameter = budgetTo.HasValue ?
                new ObjectParameter("BudgetTo", budgetTo) :
                new ObjectParameter("BudgetTo", typeof(double));
    
            var budgetCommentParameter = budgetComment != null ?
                new ObjectParameter("BudgetComment", budgetComment) :
                new ObjectParameter("BudgetComment", typeof(string));
    
            var tanentIdParameter = tanentId.HasValue ?
                new ObjectParameter("TanentId", tanentId) :
                new ObjectParameter("TanentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_TanentApplication_Add", unitTypeParameter, numberOfBedRoomParameter, locationCommentParameter, checkInDateParameter, checkOutDateParameter, purposeOfRentParameter, purposeOfRentCommentParameter, airportPickUpParameter, airportPickUpCommentParameter, budgetFromParameter, budgetToParameter, budgetCommentParameter, tanentIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_TanentApplication_Delete(Nullable<int> tanentAppId)
        {
            var tanentAppIdParameter = tanentAppId.HasValue ?
                new ObjectParameter("TanentAppId", tanentAppId) :
                new ObjectParameter("TanentAppId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_TanentApplication_Delete", tanentAppIdParameter);
        }
    
        public virtual ObjectResult<USP_TanentApplication_GetById_Result> USP_TanentApplication_GetById(Nullable<int> tanentApplicationId)
        {
            var tanentApplicationIdParameter = tanentApplicationId.HasValue ?
                new ObjectParameter("TanentApplicationId", tanentApplicationId) :
                new ObjectParameter("TanentApplicationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_TanentApplication_GetById_Result>("USP_TanentApplication_GetById", tanentApplicationIdParameter);
        }
    
        public virtual ObjectResult<USP_TanentApplication_GetByTanentId_Result> USP_TanentApplication_GetByTanentId(Nullable<int> tanentId)
        {
            var tanentIdParameter = tanentId.HasValue ?
                new ObjectParameter("TanentId", tanentId) :
                new ObjectParameter("TanentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_TanentApplication_GetByTanentId_Result>("USP_TanentApplication_GetByTanentId", tanentIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_TanentApplication_UpdateById(Nullable<int> tanentAppId, string unitType, Nullable<int> numberOfBedRoom, string locationComment, Nullable<System.DateTime> checkInDate, Nullable<System.DateTime> checkOutDate, string purposeOfRent, string purposeOfRentComment, Nullable<bool> airportPickUp, string airportPickUpComment, Nullable<double> budgetFrom, Nullable<double> budgetTo, string budgetComment, Nullable<int> tanentId)
        {
            var tanentAppIdParameter = tanentAppId.HasValue ?
                new ObjectParameter("TanentAppId", tanentAppId) :
                new ObjectParameter("TanentAppId", typeof(int));
    
            var unitTypeParameter = unitType != null ?
                new ObjectParameter("UnitType", unitType) :
                new ObjectParameter("UnitType", typeof(string));
    
            var numberOfBedRoomParameter = numberOfBedRoom.HasValue ?
                new ObjectParameter("NumberOfBedRoom", numberOfBedRoom) :
                new ObjectParameter("NumberOfBedRoom", typeof(int));
    
            var locationCommentParameter = locationComment != null ?
                new ObjectParameter("LocationComment", locationComment) :
                new ObjectParameter("LocationComment", typeof(string));
    
            var checkInDateParameter = checkInDate.HasValue ?
                new ObjectParameter("CheckInDate", checkInDate) :
                new ObjectParameter("CheckInDate", typeof(System.DateTime));
    
            var checkOutDateParameter = checkOutDate.HasValue ?
                new ObjectParameter("CheckOutDate", checkOutDate) :
                new ObjectParameter("CheckOutDate", typeof(System.DateTime));
    
            var purposeOfRentParameter = purposeOfRent != null ?
                new ObjectParameter("PurposeOfRent", purposeOfRent) :
                new ObjectParameter("PurposeOfRent", typeof(string));
    
            var purposeOfRentCommentParameter = purposeOfRentComment != null ?
                new ObjectParameter("PurposeOfRentComment", purposeOfRentComment) :
                new ObjectParameter("PurposeOfRentComment", typeof(string));
    
            var airportPickUpParameter = airportPickUp.HasValue ?
                new ObjectParameter("AirportPickUp", airportPickUp) :
                new ObjectParameter("AirportPickUp", typeof(bool));
    
            var airportPickUpCommentParameter = airportPickUpComment != null ?
                new ObjectParameter("AirportPickUpComment", airportPickUpComment) :
                new ObjectParameter("AirportPickUpComment", typeof(string));
    
            var budgetFromParameter = budgetFrom.HasValue ?
                new ObjectParameter("BudgetFrom", budgetFrom) :
                new ObjectParameter("BudgetFrom", typeof(double));
    
            var budgetToParameter = budgetTo.HasValue ?
                new ObjectParameter("BudgetTo", budgetTo) :
                new ObjectParameter("BudgetTo", typeof(double));
    
            var budgetCommentParameter = budgetComment != null ?
                new ObjectParameter("BudgetComment", budgetComment) :
                new ObjectParameter("BudgetComment", typeof(string));
    
            var tanentIdParameter = tanentId.HasValue ?
                new ObjectParameter("TanentId", tanentId) :
                new ObjectParameter("TanentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_TanentApplication_UpdateById", tanentAppIdParameter, unitTypeParameter, numberOfBedRoomParameter, locationCommentParameter, checkInDateParameter, checkOutDateParameter, purposeOfRentParameter, purposeOfRentCommentParameter, airportPickUpParameter, airportPickUpCommentParameter, budgetFromParameter, budgetToParameter, budgetCommentParameter, tanentIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_TanentRent_Add(Nullable<int> unitID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> approvedStatus)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var approvedStatusParameter = approvedStatus.HasValue ?
                new ObjectParameter("ApprovedStatus", approvedStatus) :
                new ObjectParameter("ApprovedStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_TanentRent_Add", unitIDParameter, fromDateParameter, toDateParameter, approvedStatusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_TanentRent_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_TanentRent_Delete", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_TanentRent_UpdateById(Nullable<int> id, Nullable<int> unitID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> approvedStatus)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var approvedStatusParameter = approvedStatus.HasValue ?
                new ObjectParameter("ApprovedStatus", approvedStatus) :
                new ObjectParameter("ApprovedStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_TanentRent_UpdateById", idParameter, unitIDParameter, fromDateParameter, toDateParameter, approvedStatusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Unit_Add(Nullable<int> ownerID, string propertyExtNumber, string location, Nullable<int> numberOfMasterRooms, Nullable<int> numberOfBedRooms, Nullable<int> numberOfBathRooms, Nullable<int> numberOfMaidRooms, Nullable<int> area, string type, string flr, Nullable<int> numberOfTrrace, Nullable<int> numberOfRoof, Nullable<int> numberOfGarden, Nullable<int> numberOfSwimmingPools, Nullable<int> numberOfSingleBeds, Nullable<int> numberOfDoubleBeds, Nullable<int> numberOfSofaBeds, Nullable<int> hostingNumber, Nullable<int> rentingTerm, string rentingComment, Nullable<double> minimumRatePerWeek, Nullable<double> minimumRatePerMonth, Nullable<double> gVRDecidedRate, Nullable<bool> propertyFurnishingEquiment, string furnishingComments, string electricalApplianceComments, string overLookingViewComments, string overalCondition, string overalCondationComment, Nullable<bool> approvedStatus)
        {
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var propertyExtNumberParameter = propertyExtNumber != null ?
                new ObjectParameter("PropertyExtNumber", propertyExtNumber) :
                new ObjectParameter("PropertyExtNumber", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var numberOfMasterRoomsParameter = numberOfMasterRooms.HasValue ?
                new ObjectParameter("NumberOfMasterRooms", numberOfMasterRooms) :
                new ObjectParameter("NumberOfMasterRooms", typeof(int));
    
            var numberOfBedRoomsParameter = numberOfBedRooms.HasValue ?
                new ObjectParameter("NumberOfBedRooms", numberOfBedRooms) :
                new ObjectParameter("NumberOfBedRooms", typeof(int));
    
            var numberOfBathRoomsParameter = numberOfBathRooms.HasValue ?
                new ObjectParameter("NumberOfBathRooms", numberOfBathRooms) :
                new ObjectParameter("NumberOfBathRooms", typeof(int));
    
            var numberOfMaidRoomsParameter = numberOfMaidRooms.HasValue ?
                new ObjectParameter("NumberOfMaidRooms", numberOfMaidRooms) :
                new ObjectParameter("NumberOfMaidRooms", typeof(int));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var flrParameter = flr != null ?
                new ObjectParameter("Flr", flr) :
                new ObjectParameter("Flr", typeof(string));
    
            var numberOfTrraceParameter = numberOfTrrace.HasValue ?
                new ObjectParameter("NumberOfTrrace", numberOfTrrace) :
                new ObjectParameter("NumberOfTrrace", typeof(int));
    
            var numberOfRoofParameter = numberOfRoof.HasValue ?
                new ObjectParameter("NumberOfRoof", numberOfRoof) :
                new ObjectParameter("NumberOfRoof", typeof(int));
    
            var numberOfGardenParameter = numberOfGarden.HasValue ?
                new ObjectParameter("NumberOfGarden", numberOfGarden) :
                new ObjectParameter("NumberOfGarden", typeof(int));
    
            var numberOfSwimmingPoolsParameter = numberOfSwimmingPools.HasValue ?
                new ObjectParameter("NumberOfSwimmingPools", numberOfSwimmingPools) :
                new ObjectParameter("NumberOfSwimmingPools", typeof(int));
    
            var numberOfSingleBedsParameter = numberOfSingleBeds.HasValue ?
                new ObjectParameter("NumberOfSingleBeds", numberOfSingleBeds) :
                new ObjectParameter("NumberOfSingleBeds", typeof(int));
    
            var numberOfDoubleBedsParameter = numberOfDoubleBeds.HasValue ?
                new ObjectParameter("NumberOfDoubleBeds", numberOfDoubleBeds) :
                new ObjectParameter("NumberOfDoubleBeds", typeof(int));
    
            var numberOfSofaBedsParameter = numberOfSofaBeds.HasValue ?
                new ObjectParameter("NumberOfSofaBeds", numberOfSofaBeds) :
                new ObjectParameter("NumberOfSofaBeds", typeof(int));
    
            var hostingNumberParameter = hostingNumber.HasValue ?
                new ObjectParameter("HostingNumber", hostingNumber) :
                new ObjectParameter("HostingNumber", typeof(int));
    
            var rentingTermParameter = rentingTerm.HasValue ?
                new ObjectParameter("RentingTerm", rentingTerm) :
                new ObjectParameter("RentingTerm", typeof(int));
    
            var rentingCommentParameter = rentingComment != null ?
                new ObjectParameter("RentingComment", rentingComment) :
                new ObjectParameter("RentingComment", typeof(string));
    
            var minimumRatePerWeekParameter = minimumRatePerWeek.HasValue ?
                new ObjectParameter("MinimumRatePerWeek", minimumRatePerWeek) :
                new ObjectParameter("MinimumRatePerWeek", typeof(double));
    
            var minimumRatePerMonthParameter = minimumRatePerMonth.HasValue ?
                new ObjectParameter("MinimumRatePerMonth", minimumRatePerMonth) :
                new ObjectParameter("MinimumRatePerMonth", typeof(double));
    
            var gVRDecidedRateParameter = gVRDecidedRate.HasValue ?
                new ObjectParameter("GVRDecidedRate", gVRDecidedRate) :
                new ObjectParameter("GVRDecidedRate", typeof(double));
    
            var propertyFurnishingEquimentParameter = propertyFurnishingEquiment.HasValue ?
                new ObjectParameter("PropertyFurnishingEquiment", propertyFurnishingEquiment) :
                new ObjectParameter("PropertyFurnishingEquiment", typeof(bool));
    
            var furnishingCommentsParameter = furnishingComments != null ?
                new ObjectParameter("FurnishingComments", furnishingComments) :
                new ObjectParameter("FurnishingComments", typeof(string));
    
            var electricalApplianceCommentsParameter = electricalApplianceComments != null ?
                new ObjectParameter("ElectricalApplianceComments", electricalApplianceComments) :
                new ObjectParameter("ElectricalApplianceComments", typeof(string));
    
            var overLookingViewCommentsParameter = overLookingViewComments != null ?
                new ObjectParameter("OverLookingViewComments", overLookingViewComments) :
                new ObjectParameter("OverLookingViewComments", typeof(string));
    
            var overalConditionParameter = overalCondition != null ?
                new ObjectParameter("OveralCondition", overalCondition) :
                new ObjectParameter("OveralCondition", typeof(string));
    
            var overalCondationCommentParameter = overalCondationComment != null ?
                new ObjectParameter("OveralCondationComment", overalCondationComment) :
                new ObjectParameter("OveralCondationComment", typeof(string));
    
            var approvedStatusParameter = approvedStatus.HasValue ?
                new ObjectParameter("ApprovedStatus", approvedStatus) :
                new ObjectParameter("ApprovedStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Unit_Add", ownerIDParameter, propertyExtNumberParameter, locationParameter, numberOfMasterRoomsParameter, numberOfBedRoomsParameter, numberOfBathRoomsParameter, numberOfMaidRoomsParameter, areaParameter, typeParameter, flrParameter, numberOfTrraceParameter, numberOfRoofParameter, numberOfGardenParameter, numberOfSwimmingPoolsParameter, numberOfSingleBedsParameter, numberOfDoubleBedsParameter, numberOfSofaBedsParameter, hostingNumberParameter, rentingTermParameter, rentingCommentParameter, minimumRatePerWeekParameter, minimumRatePerMonthParameter, gVRDecidedRateParameter, propertyFurnishingEquimentParameter, furnishingCommentsParameter, electricalApplianceCommentsParameter, overLookingViewCommentsParameter, overalConditionParameter, overalCondationCommentParameter, approvedStatusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Unit_ElectricalAppliance_Add(Nullable<int> unitID, Nullable<int> electricalAplliancID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var electricalAplliancIDParameter = electricalAplliancID.HasValue ?
                new ObjectParameter("ElectricalAplliancID", electricalAplliancID) :
                new ObjectParameter("ElectricalAplliancID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Unit_ElectricalAppliance_Add", unitIDParameter, electricalAplliancIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Unit_ElectricalAppliance_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Unit_ElectricalAppliance_Delete", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Unit_ElectricalAppliance_UpdateById(Nullable<int> id, Nullable<int> unitID, Nullable<int> electricalAplliancID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var electricalAplliancIDParameter = electricalAplliancID.HasValue ?
                new ObjectParameter("ElectricalAplliancID", electricalAplliancID) :
                new ObjectParameter("ElectricalAplliancID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Unit_ElectricalAppliance_UpdateById", idParameter, unitIDParameter, electricalAplliancIDParameter);
        }
    
        public virtual ObjectResult<USP_Unit_GetById_Result> USP_Unit_GetById(Nullable<int> unitId)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Unit_GetById_Result>("USP_Unit_GetById", unitIdParameter);
        }
    
        public virtual ObjectResult<USP_Unit_GetByOwnerId_Result> USP_Unit_GetByOwnerId(Nullable<int> ownerId)
        {
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Unit_GetByOwnerId_Result>("USP_Unit_GetByOwnerId", ownerIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Unit_OverLookingView_Add(Nullable<int> unitID, Nullable<int> overLookingViewID)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var overLookingViewIDParameter = overLookingViewID.HasValue ?
                new ObjectParameter("OverLookingViewID", overLookingViewID) :
                new ObjectParameter("OverLookingViewID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Unit_OverLookingView_Add", unitIDParameter, overLookingViewIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Unit_OverLookingView_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Unit_OverLookingView_Delete", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Unit_OverLookingView_UpdateById(Nullable<int> id, Nullable<int> unitID, Nullable<int> overLookingViewID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var overLookingViewIDParameter = overLookingViewID.HasValue ?
                new ObjectParameter("OverLookingViewID", overLookingViewID) :
                new ObjectParameter("OverLookingViewID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Unit_OverLookingView_UpdateById", idParameter, unitIDParameter, overLookingViewIDParameter);
        }
    
        public virtual ObjectResult<USP_Unit_Search_Result> USP_Unit_Search(Nullable<int> ownerID, string location, Nullable<int> numberOfMasterRooms, Nullable<int> numberOfBedRooms, Nullable<int> numberOfBathRooms, Nullable<int> numberOfMaidRooms, Nullable<int> area, string type, string flr, Nullable<int> numberOfTrrace, Nullable<int> numberOfRoof, Nullable<int> numberOfGarden, Nullable<int> numberOfSwimmingPools, Nullable<int> numberOfSingleBeds, Nullable<int> numberOfDoubleBeds, Nullable<int> numberOfSofaBeds, Nullable<int> hostingNumber, Nullable<int> rentingTerm, Nullable<double> ratePerWeek, Nullable<double> ratePerMonth, string overalCondition, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var numberOfMasterRoomsParameter = numberOfMasterRooms.HasValue ?
                new ObjectParameter("NumberOfMasterRooms", numberOfMasterRooms) :
                new ObjectParameter("NumberOfMasterRooms", typeof(int));
    
            var numberOfBedRoomsParameter = numberOfBedRooms.HasValue ?
                new ObjectParameter("NumberOfBedRooms", numberOfBedRooms) :
                new ObjectParameter("NumberOfBedRooms", typeof(int));
    
            var numberOfBathRoomsParameter = numberOfBathRooms.HasValue ?
                new ObjectParameter("NumberOfBathRooms", numberOfBathRooms) :
                new ObjectParameter("NumberOfBathRooms", typeof(int));
    
            var numberOfMaidRoomsParameter = numberOfMaidRooms.HasValue ?
                new ObjectParameter("NumberOfMaidRooms", numberOfMaidRooms) :
                new ObjectParameter("NumberOfMaidRooms", typeof(int));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var flrParameter = flr != null ?
                new ObjectParameter("Flr", flr) :
                new ObjectParameter("Flr", typeof(string));
    
            var numberOfTrraceParameter = numberOfTrrace.HasValue ?
                new ObjectParameter("NumberOfTrrace", numberOfTrrace) :
                new ObjectParameter("NumberOfTrrace", typeof(int));
    
            var numberOfRoofParameter = numberOfRoof.HasValue ?
                new ObjectParameter("NumberOfRoof", numberOfRoof) :
                new ObjectParameter("NumberOfRoof", typeof(int));
    
            var numberOfGardenParameter = numberOfGarden.HasValue ?
                new ObjectParameter("NumberOfGarden", numberOfGarden) :
                new ObjectParameter("NumberOfGarden", typeof(int));
    
            var numberOfSwimmingPoolsParameter = numberOfSwimmingPools.HasValue ?
                new ObjectParameter("NumberOfSwimmingPools", numberOfSwimmingPools) :
                new ObjectParameter("NumberOfSwimmingPools", typeof(int));
    
            var numberOfSingleBedsParameter = numberOfSingleBeds.HasValue ?
                new ObjectParameter("NumberOfSingleBeds", numberOfSingleBeds) :
                new ObjectParameter("NumberOfSingleBeds", typeof(int));
    
            var numberOfDoubleBedsParameter = numberOfDoubleBeds.HasValue ?
                new ObjectParameter("NumberOfDoubleBeds", numberOfDoubleBeds) :
                new ObjectParameter("NumberOfDoubleBeds", typeof(int));
    
            var numberOfSofaBedsParameter = numberOfSofaBeds.HasValue ?
                new ObjectParameter("NumberOfSofaBeds", numberOfSofaBeds) :
                new ObjectParameter("NumberOfSofaBeds", typeof(int));
    
            var hostingNumberParameter = hostingNumber.HasValue ?
                new ObjectParameter("HostingNumber", hostingNumber) :
                new ObjectParameter("HostingNumber", typeof(int));
    
            var rentingTermParameter = rentingTerm.HasValue ?
                new ObjectParameter("RentingTerm", rentingTerm) :
                new ObjectParameter("RentingTerm", typeof(int));
    
            var ratePerWeekParameter = ratePerWeek.HasValue ?
                new ObjectParameter("RatePerWeek", ratePerWeek) :
                new ObjectParameter("RatePerWeek", typeof(double));
    
            var ratePerMonthParameter = ratePerMonth.HasValue ?
                new ObjectParameter("RatePerMonth", ratePerMonth) :
                new ObjectParameter("RatePerMonth", typeof(double));
    
            var overalConditionParameter = overalCondition != null ?
                new ObjectParameter("OveralCondition", overalCondition) :
                new ObjectParameter("OveralCondition", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Unit_Search_Result>("USP_Unit_Search", ownerIDParameter, locationParameter, numberOfMasterRoomsParameter, numberOfBedRoomsParameter, numberOfBathRoomsParameter, numberOfMaidRoomsParameter, areaParameter, typeParameter, flrParameter, numberOfTrraceParameter, numberOfRoofParameter, numberOfGardenParameter, numberOfSwimmingPoolsParameter, numberOfSingleBedsParameter, numberOfDoubleBedsParameter, numberOfSofaBedsParameter, hostingNumberParameter, rentingTermParameter, ratePerWeekParameter, ratePerMonthParameter, overalConditionParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_Unit_UpdateById(Nullable<int> unitId, Nullable<int> ownerID, string propertyExtNumber, string location, Nullable<int> numberOfMasterRooms, Nullable<int> numberOfBedRooms, Nullable<int> numberOfBathRooms, Nullable<int> numberOfMaidRooms, Nullable<int> area, string type, string flr, Nullable<int> numberOfTrrace, Nullable<int> numberOfRoof, Nullable<int> numberOfGarden, Nullable<int> numberOfSwimmingPools, Nullable<int> numberOfSingleBeds, Nullable<int> numberOfDoubleBeds, Nullable<int> numberOfSofaBeds, Nullable<int> hostingNumber, Nullable<int> rentingTerm, string rentingComment, Nullable<double> minimumRatePerWeek, Nullable<double> minimumRatePerMonth, Nullable<double> gVRDecidedRate, Nullable<bool> propertyFurnishingEquiment, string furnishingComments, string electricalApplianceComments, string overLookingViewComments, string overalCondition, string overalCondationComment, Nullable<bool> approvedStatus)
        {
            var unitIdParameter = unitId.HasValue ?
                new ObjectParameter("UnitId", unitId) :
                new ObjectParameter("UnitId", typeof(int));
    
            var ownerIDParameter = ownerID.HasValue ?
                new ObjectParameter("OwnerID", ownerID) :
                new ObjectParameter("OwnerID", typeof(int));
    
            var propertyExtNumberParameter = propertyExtNumber != null ?
                new ObjectParameter("PropertyExtNumber", propertyExtNumber) :
                new ObjectParameter("PropertyExtNumber", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var numberOfMasterRoomsParameter = numberOfMasterRooms.HasValue ?
                new ObjectParameter("NumberOfMasterRooms", numberOfMasterRooms) :
                new ObjectParameter("NumberOfMasterRooms", typeof(int));
    
            var numberOfBedRoomsParameter = numberOfBedRooms.HasValue ?
                new ObjectParameter("NumberOfBedRooms", numberOfBedRooms) :
                new ObjectParameter("NumberOfBedRooms", typeof(int));
    
            var numberOfBathRoomsParameter = numberOfBathRooms.HasValue ?
                new ObjectParameter("NumberOfBathRooms", numberOfBathRooms) :
                new ObjectParameter("NumberOfBathRooms", typeof(int));
    
            var numberOfMaidRoomsParameter = numberOfMaidRooms.HasValue ?
                new ObjectParameter("NumberOfMaidRooms", numberOfMaidRooms) :
                new ObjectParameter("NumberOfMaidRooms", typeof(int));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var flrParameter = flr != null ?
                new ObjectParameter("Flr", flr) :
                new ObjectParameter("Flr", typeof(string));
    
            var numberOfTrraceParameter = numberOfTrrace.HasValue ?
                new ObjectParameter("NumberOfTrrace", numberOfTrrace) :
                new ObjectParameter("NumberOfTrrace", typeof(int));
    
            var numberOfRoofParameter = numberOfRoof.HasValue ?
                new ObjectParameter("NumberOfRoof", numberOfRoof) :
                new ObjectParameter("NumberOfRoof", typeof(int));
    
            var numberOfGardenParameter = numberOfGarden.HasValue ?
                new ObjectParameter("NumberOfGarden", numberOfGarden) :
                new ObjectParameter("NumberOfGarden", typeof(int));
    
            var numberOfSwimmingPoolsParameter = numberOfSwimmingPools.HasValue ?
                new ObjectParameter("NumberOfSwimmingPools", numberOfSwimmingPools) :
                new ObjectParameter("NumberOfSwimmingPools", typeof(int));
    
            var numberOfSingleBedsParameter = numberOfSingleBeds.HasValue ?
                new ObjectParameter("NumberOfSingleBeds", numberOfSingleBeds) :
                new ObjectParameter("NumberOfSingleBeds", typeof(int));
    
            var numberOfDoubleBedsParameter = numberOfDoubleBeds.HasValue ?
                new ObjectParameter("NumberOfDoubleBeds", numberOfDoubleBeds) :
                new ObjectParameter("NumberOfDoubleBeds", typeof(int));
    
            var numberOfSofaBedsParameter = numberOfSofaBeds.HasValue ?
                new ObjectParameter("NumberOfSofaBeds", numberOfSofaBeds) :
                new ObjectParameter("NumberOfSofaBeds", typeof(int));
    
            var hostingNumberParameter = hostingNumber.HasValue ?
                new ObjectParameter("HostingNumber", hostingNumber) :
                new ObjectParameter("HostingNumber", typeof(int));
    
            var rentingTermParameter = rentingTerm.HasValue ?
                new ObjectParameter("RentingTerm", rentingTerm) :
                new ObjectParameter("RentingTerm", typeof(int));
    
            var rentingCommentParameter = rentingComment != null ?
                new ObjectParameter("RentingComment", rentingComment) :
                new ObjectParameter("RentingComment", typeof(string));
    
            var minimumRatePerWeekParameter = minimumRatePerWeek.HasValue ?
                new ObjectParameter("MinimumRatePerWeek", minimumRatePerWeek) :
                new ObjectParameter("MinimumRatePerWeek", typeof(double));
    
            var minimumRatePerMonthParameter = minimumRatePerMonth.HasValue ?
                new ObjectParameter("MinimumRatePerMonth", minimumRatePerMonth) :
                new ObjectParameter("MinimumRatePerMonth", typeof(double));
    
            var gVRDecidedRateParameter = gVRDecidedRate.HasValue ?
                new ObjectParameter("GVRDecidedRate", gVRDecidedRate) :
                new ObjectParameter("GVRDecidedRate", typeof(double));
    
            var propertyFurnishingEquimentParameter = propertyFurnishingEquiment.HasValue ?
                new ObjectParameter("PropertyFurnishingEquiment", propertyFurnishingEquiment) :
                new ObjectParameter("PropertyFurnishingEquiment", typeof(bool));
    
            var furnishingCommentsParameter = furnishingComments != null ?
                new ObjectParameter("FurnishingComments", furnishingComments) :
                new ObjectParameter("FurnishingComments", typeof(string));
    
            var electricalApplianceCommentsParameter = electricalApplianceComments != null ?
                new ObjectParameter("ElectricalApplianceComments", electricalApplianceComments) :
                new ObjectParameter("ElectricalApplianceComments", typeof(string));
    
            var overLookingViewCommentsParameter = overLookingViewComments != null ?
                new ObjectParameter("OverLookingViewComments", overLookingViewComments) :
                new ObjectParameter("OverLookingViewComments", typeof(string));
    
            var overalConditionParameter = overalCondition != null ?
                new ObjectParameter("OveralCondition", overalCondition) :
                new ObjectParameter("OveralCondition", typeof(string));
    
            var overalCondationCommentParameter = overalCondationComment != null ?
                new ObjectParameter("OveralCondationComment", overalCondationComment) :
                new ObjectParameter("OveralCondationComment", typeof(string));
    
            var approvedStatusParameter = approvedStatus.HasValue ?
                new ObjectParameter("ApprovedStatus", approvedStatus) :
                new ObjectParameter("ApprovedStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_Unit_UpdateById", unitIdParameter, ownerIDParameter, propertyExtNumberParameter, locationParameter, numberOfMasterRoomsParameter, numberOfBedRoomsParameter, numberOfBathRoomsParameter, numberOfMaidRoomsParameter, areaParameter, typeParameter, flrParameter, numberOfTrraceParameter, numberOfRoofParameter, numberOfGardenParameter, numberOfSwimmingPoolsParameter, numberOfSingleBedsParameter, numberOfDoubleBedsParameter, numberOfSofaBedsParameter, hostingNumberParameter, rentingTermParameter, rentingCommentParameter, minimumRatePerWeekParameter, minimumRatePerMonthParameter, gVRDecidedRateParameter, propertyFurnishingEquimentParameter, furnishingCommentsParameter, electricalApplianceCommentsParameter, overLookingViewCommentsParameter, overalConditionParameter, overalCondationCommentParameter, approvedStatusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_UnitEditHistory_Add(Nullable<int> unitID, string propertyExtNumber, string location, Nullable<int> numberOfMasterRooms, Nullable<int> numberOfBedRooms, Nullable<int> numberOfBathRooms, Nullable<int> numberOfMaidRooms, Nullable<int> area, string type, string flr, Nullable<int> numberOfTrrace, Nullable<int> numberOfRoof, Nullable<int> numberOfGarden, Nullable<int> numberOfSwimmingPools, Nullable<int> numberOfSingleBeds, Nullable<int> numberOfDoubleBeds, Nullable<int> numberOfSofaBeds, Nullable<int> hostingNumber, Nullable<int> rentingTerm, string rentingComment, Nullable<double> minimumRatePerWeek, Nullable<double> minimumRatePerMonth, Nullable<double> gVRDecidedRate, Nullable<bool> propertyFurnishingEquiment, string furnishingComments, string electricalApplianceComments, string overLookingViewComments, string overalCondition, string overalCondationComment, Nullable<bool> approvedStatus, Nullable<System.DateTime> editDate)
        {
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var propertyExtNumberParameter = propertyExtNumber != null ?
                new ObjectParameter("PropertyExtNumber", propertyExtNumber) :
                new ObjectParameter("PropertyExtNumber", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var numberOfMasterRoomsParameter = numberOfMasterRooms.HasValue ?
                new ObjectParameter("NumberOfMasterRooms", numberOfMasterRooms) :
                new ObjectParameter("NumberOfMasterRooms", typeof(int));
    
            var numberOfBedRoomsParameter = numberOfBedRooms.HasValue ?
                new ObjectParameter("NumberOfBedRooms", numberOfBedRooms) :
                new ObjectParameter("NumberOfBedRooms", typeof(int));
    
            var numberOfBathRoomsParameter = numberOfBathRooms.HasValue ?
                new ObjectParameter("NumberOfBathRooms", numberOfBathRooms) :
                new ObjectParameter("NumberOfBathRooms", typeof(int));
    
            var numberOfMaidRoomsParameter = numberOfMaidRooms.HasValue ?
                new ObjectParameter("NumberOfMaidRooms", numberOfMaidRooms) :
                new ObjectParameter("NumberOfMaidRooms", typeof(int));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var flrParameter = flr != null ?
                new ObjectParameter("Flr", flr) :
                new ObjectParameter("Flr", typeof(string));
    
            var numberOfTrraceParameter = numberOfTrrace.HasValue ?
                new ObjectParameter("NumberOfTrrace", numberOfTrrace) :
                new ObjectParameter("NumberOfTrrace", typeof(int));
    
            var numberOfRoofParameter = numberOfRoof.HasValue ?
                new ObjectParameter("NumberOfRoof", numberOfRoof) :
                new ObjectParameter("NumberOfRoof", typeof(int));
    
            var numberOfGardenParameter = numberOfGarden.HasValue ?
                new ObjectParameter("NumberOfGarden", numberOfGarden) :
                new ObjectParameter("NumberOfGarden", typeof(int));
    
            var numberOfSwimmingPoolsParameter = numberOfSwimmingPools.HasValue ?
                new ObjectParameter("NumberOfSwimmingPools", numberOfSwimmingPools) :
                new ObjectParameter("NumberOfSwimmingPools", typeof(int));
    
            var numberOfSingleBedsParameter = numberOfSingleBeds.HasValue ?
                new ObjectParameter("NumberOfSingleBeds", numberOfSingleBeds) :
                new ObjectParameter("NumberOfSingleBeds", typeof(int));
    
            var numberOfDoubleBedsParameter = numberOfDoubleBeds.HasValue ?
                new ObjectParameter("NumberOfDoubleBeds", numberOfDoubleBeds) :
                new ObjectParameter("NumberOfDoubleBeds", typeof(int));
    
            var numberOfSofaBedsParameter = numberOfSofaBeds.HasValue ?
                new ObjectParameter("NumberOfSofaBeds", numberOfSofaBeds) :
                new ObjectParameter("NumberOfSofaBeds", typeof(int));
    
            var hostingNumberParameter = hostingNumber.HasValue ?
                new ObjectParameter("HostingNumber", hostingNumber) :
                new ObjectParameter("HostingNumber", typeof(int));
    
            var rentingTermParameter = rentingTerm.HasValue ?
                new ObjectParameter("RentingTerm", rentingTerm) :
                new ObjectParameter("RentingTerm", typeof(int));
    
            var rentingCommentParameter = rentingComment != null ?
                new ObjectParameter("RentingComment", rentingComment) :
                new ObjectParameter("RentingComment", typeof(string));
    
            var minimumRatePerWeekParameter = minimumRatePerWeek.HasValue ?
                new ObjectParameter("MinimumRatePerWeek", minimumRatePerWeek) :
                new ObjectParameter("MinimumRatePerWeek", typeof(double));
    
            var minimumRatePerMonthParameter = minimumRatePerMonth.HasValue ?
                new ObjectParameter("MinimumRatePerMonth", minimumRatePerMonth) :
                new ObjectParameter("MinimumRatePerMonth", typeof(double));
    
            var gVRDecidedRateParameter = gVRDecidedRate.HasValue ?
                new ObjectParameter("GVRDecidedRate", gVRDecidedRate) :
                new ObjectParameter("GVRDecidedRate", typeof(double));
    
            var propertyFurnishingEquimentParameter = propertyFurnishingEquiment.HasValue ?
                new ObjectParameter("PropertyFurnishingEquiment", propertyFurnishingEquiment) :
                new ObjectParameter("PropertyFurnishingEquiment", typeof(bool));
    
            var furnishingCommentsParameter = furnishingComments != null ?
                new ObjectParameter("FurnishingComments", furnishingComments) :
                new ObjectParameter("FurnishingComments", typeof(string));
    
            var electricalApplianceCommentsParameter = electricalApplianceComments != null ?
                new ObjectParameter("ElectricalApplianceComments", electricalApplianceComments) :
                new ObjectParameter("ElectricalApplianceComments", typeof(string));
    
            var overLookingViewCommentsParameter = overLookingViewComments != null ?
                new ObjectParameter("OverLookingViewComments", overLookingViewComments) :
                new ObjectParameter("OverLookingViewComments", typeof(string));
    
            var overalConditionParameter = overalCondition != null ?
                new ObjectParameter("OveralCondition", overalCondition) :
                new ObjectParameter("OveralCondition", typeof(string));
    
            var overalCondationCommentParameter = overalCondationComment != null ?
                new ObjectParameter("OveralCondationComment", overalCondationComment) :
                new ObjectParameter("OveralCondationComment", typeof(string));
    
            var approvedStatusParameter = approvedStatus.HasValue ?
                new ObjectParameter("ApprovedStatus", approvedStatus) :
                new ObjectParameter("ApprovedStatus", typeof(bool));
    
            var editDateParameter = editDate.HasValue ?
                new ObjectParameter("EditDate", editDate) :
                new ObjectParameter("EditDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_UnitEditHistory_Add", unitIDParameter, propertyExtNumberParameter, locationParameter, numberOfMasterRoomsParameter, numberOfBedRoomsParameter, numberOfBathRoomsParameter, numberOfMaidRoomsParameter, areaParameter, typeParameter, flrParameter, numberOfTrraceParameter, numberOfRoofParameter, numberOfGardenParameter, numberOfSwimmingPoolsParameter, numberOfSingleBedsParameter, numberOfDoubleBedsParameter, numberOfSofaBedsParameter, hostingNumberParameter, rentingTermParameter, rentingCommentParameter, minimumRatePerWeekParameter, minimumRatePerMonthParameter, gVRDecidedRateParameter, propertyFurnishingEquimentParameter, furnishingCommentsParameter, electricalApplianceCommentsParameter, overLookingViewCommentsParameter, overalConditionParameter, overalCondationCommentParameter, approvedStatusParameter, editDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_UnitEditHistory_Delete(Nullable<int> recoredId)
        {
            var recoredIdParameter = recoredId.HasValue ?
                new ObjectParameter("RecoredId", recoredId) :
                new ObjectParameter("RecoredId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_UnitEditHistory_Delete", recoredIdParameter);
        }
    
        public virtual ObjectResult<USP_UnitEditHistory_GetById_Result> USP_UnitEditHistory_GetById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_UnitEditHistory_GetById_Result>("USP_UnitEditHistory_GetById", idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> USP_UnitEditHistory_UpdateById(Nullable<int> recoredId, string propertyExtNumber, string location, Nullable<int> numberOfMasterRooms, Nullable<int> numberOfBedRooms, Nullable<int> numberOfBathRooms, Nullable<int> numberOfMaidRooms, Nullable<int> area, string type, string flr, Nullable<int> numberOfTrrace, Nullable<int> numberOfRoof, Nullable<int> numberOfGarden, Nullable<int> numberOfSwimmingPools, Nullable<int> numberOfSingleBeds, Nullable<int> numberOfDoubleBeds, Nullable<int> numberOfSofaBeds, Nullable<int> hostingNumber, Nullable<int> rentingTerm, string rentingComment, Nullable<double> minimumRatePerWeek, Nullable<double> minimumRatePerMonth, Nullable<double> gVRDecidedRate, Nullable<bool> propertyFurnishingEquiment, string furnishingComments, string electricalApplianceComments, string overLookingViewComments, string overalCondition, string overalCondationComment, Nullable<System.DateTime> editDate, Nullable<bool> approvedStatus)
        {
            var recoredIdParameter = recoredId.HasValue ?
                new ObjectParameter("RecoredId", recoredId) :
                new ObjectParameter("RecoredId", typeof(int));
    
            var propertyExtNumberParameter = propertyExtNumber != null ?
                new ObjectParameter("PropertyExtNumber", propertyExtNumber) :
                new ObjectParameter("PropertyExtNumber", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var numberOfMasterRoomsParameter = numberOfMasterRooms.HasValue ?
                new ObjectParameter("NumberOfMasterRooms", numberOfMasterRooms) :
                new ObjectParameter("NumberOfMasterRooms", typeof(int));
    
            var numberOfBedRoomsParameter = numberOfBedRooms.HasValue ?
                new ObjectParameter("NumberOfBedRooms", numberOfBedRooms) :
                new ObjectParameter("NumberOfBedRooms", typeof(int));
    
            var numberOfBathRoomsParameter = numberOfBathRooms.HasValue ?
                new ObjectParameter("NumberOfBathRooms", numberOfBathRooms) :
                new ObjectParameter("NumberOfBathRooms", typeof(int));
    
            var numberOfMaidRoomsParameter = numberOfMaidRooms.HasValue ?
                new ObjectParameter("NumberOfMaidRooms", numberOfMaidRooms) :
                new ObjectParameter("NumberOfMaidRooms", typeof(int));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var flrParameter = flr != null ?
                new ObjectParameter("Flr", flr) :
                new ObjectParameter("Flr", typeof(string));
    
            var numberOfTrraceParameter = numberOfTrrace.HasValue ?
                new ObjectParameter("NumberOfTrrace", numberOfTrrace) :
                new ObjectParameter("NumberOfTrrace", typeof(int));
    
            var numberOfRoofParameter = numberOfRoof.HasValue ?
                new ObjectParameter("NumberOfRoof", numberOfRoof) :
                new ObjectParameter("NumberOfRoof", typeof(int));
    
            var numberOfGardenParameter = numberOfGarden.HasValue ?
                new ObjectParameter("NumberOfGarden", numberOfGarden) :
                new ObjectParameter("NumberOfGarden", typeof(int));
    
            var numberOfSwimmingPoolsParameter = numberOfSwimmingPools.HasValue ?
                new ObjectParameter("NumberOfSwimmingPools", numberOfSwimmingPools) :
                new ObjectParameter("NumberOfSwimmingPools", typeof(int));
    
            var numberOfSingleBedsParameter = numberOfSingleBeds.HasValue ?
                new ObjectParameter("NumberOfSingleBeds", numberOfSingleBeds) :
                new ObjectParameter("NumberOfSingleBeds", typeof(int));
    
            var numberOfDoubleBedsParameter = numberOfDoubleBeds.HasValue ?
                new ObjectParameter("NumberOfDoubleBeds", numberOfDoubleBeds) :
                new ObjectParameter("NumberOfDoubleBeds", typeof(int));
    
            var numberOfSofaBedsParameter = numberOfSofaBeds.HasValue ?
                new ObjectParameter("NumberOfSofaBeds", numberOfSofaBeds) :
                new ObjectParameter("NumberOfSofaBeds", typeof(int));
    
            var hostingNumberParameter = hostingNumber.HasValue ?
                new ObjectParameter("HostingNumber", hostingNumber) :
                new ObjectParameter("HostingNumber", typeof(int));
    
            var rentingTermParameter = rentingTerm.HasValue ?
                new ObjectParameter("RentingTerm", rentingTerm) :
                new ObjectParameter("RentingTerm", typeof(int));
    
            var rentingCommentParameter = rentingComment != null ?
                new ObjectParameter("RentingComment", rentingComment) :
                new ObjectParameter("RentingComment", typeof(string));
    
            var minimumRatePerWeekParameter = minimumRatePerWeek.HasValue ?
                new ObjectParameter("MinimumRatePerWeek", minimumRatePerWeek) :
                new ObjectParameter("MinimumRatePerWeek", typeof(double));
    
            var minimumRatePerMonthParameter = minimumRatePerMonth.HasValue ?
                new ObjectParameter("MinimumRatePerMonth", minimumRatePerMonth) :
                new ObjectParameter("MinimumRatePerMonth", typeof(double));
    
            var gVRDecidedRateParameter = gVRDecidedRate.HasValue ?
                new ObjectParameter("GVRDecidedRate", gVRDecidedRate) :
                new ObjectParameter("GVRDecidedRate", typeof(double));
    
            var propertyFurnishingEquimentParameter = propertyFurnishingEquiment.HasValue ?
                new ObjectParameter("PropertyFurnishingEquiment", propertyFurnishingEquiment) :
                new ObjectParameter("PropertyFurnishingEquiment", typeof(bool));
    
            var furnishingCommentsParameter = furnishingComments != null ?
                new ObjectParameter("FurnishingComments", furnishingComments) :
                new ObjectParameter("FurnishingComments", typeof(string));
    
            var electricalApplianceCommentsParameter = electricalApplianceComments != null ?
                new ObjectParameter("ElectricalApplianceComments", electricalApplianceComments) :
                new ObjectParameter("ElectricalApplianceComments", typeof(string));
    
            var overLookingViewCommentsParameter = overLookingViewComments != null ?
                new ObjectParameter("OverLookingViewComments", overLookingViewComments) :
                new ObjectParameter("OverLookingViewComments", typeof(string));
    
            var overalConditionParameter = overalCondition != null ?
                new ObjectParameter("OveralCondition", overalCondition) :
                new ObjectParameter("OveralCondition", typeof(string));
    
            var overalCondationCommentParameter = overalCondationComment != null ?
                new ObjectParameter("OveralCondationComment", overalCondationComment) :
                new ObjectParameter("OveralCondationComment", typeof(string));
    
            var editDateParameter = editDate.HasValue ?
                new ObjectParameter("EditDate", editDate) :
                new ObjectParameter("EditDate", typeof(System.DateTime));
    
            var approvedStatusParameter = approvedStatus.HasValue ?
                new ObjectParameter("ApprovedStatus", approvedStatus) :
                new ObjectParameter("ApprovedStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("USP_UnitEditHistory_UpdateById", recoredIdParameter, propertyExtNumberParameter, locationParameter, numberOfMasterRoomsParameter, numberOfBedRoomsParameter, numberOfBathRoomsParameter, numberOfMaidRoomsParameter, areaParameter, typeParameter, flrParameter, numberOfTrraceParameter, numberOfRoofParameter, numberOfGardenParameter, numberOfSwimmingPoolsParameter, numberOfSingleBedsParameter, numberOfDoubleBedsParameter, numberOfSofaBedsParameter, hostingNumberParameter, rentingTermParameter, rentingCommentParameter, minimumRatePerWeekParameter, minimumRatePerMonthParameter, gVRDecidedRateParameter, propertyFurnishingEquimentParameter, furnishingCommentsParameter, electricalApplianceCommentsParameter, overLookingViewCommentsParameter, overalConditionParameter, overalCondationCommentParameter, editDateParameter, approvedStatusParameter);
        }
    }
}
